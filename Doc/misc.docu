//-----------------------------------------------------------------------------


/** \page naming_conventions Naming Conventions

The following naming conventions are used for the %OpenMesh code:

<b>Files:</b>
  \li \c MyClass.cc for C++-Implementation of class \c MyClass
  \li \c MyClass.hh for C++-Header of class \c MyClass

<b>Classes:</b>
  \li Class names start with a capital letter: \c MyClass
  \li Class templates end with \c T: \c MyClassTemplateT

<b>Variables:</b>
  \li One leading underscore for parameters in function-calls: \c _var
  \li One trailing underscore for member-variables: \c var_
  \li Two trailing underscores for static member-variables: \c var__

<b>Functions:</b>
  \li Words are separated by underscores: \c my_function()
		 
<b>Accessing members:</b>
  \li To get the member \c xxx_ use <tt> const& xxx() const </tt>
  \li To set the member \c xxx_ use <tt> void set_xxx(arg)  </tt>
  
**/


//-----------------------------------------------------------------------------


/** \page compiling Compiling %OpenMesh

\section compilers Tested compilers

%OpenMesh has been successfully tested for the following operating
systems / compilers:

<table>

<tr><td> Linux </td><td>
gcc 4.0.x<br>
gcc 4.1.x<br>
gcc 4.2.x<br>
gcc 4.3.x<br>
gcc 4.4.x<br>
</td></tr>

<tr><td> Windows </td><td> 
Microsoft Visual Studio 2008<br>
</td></tr>

<tr><td> MacOS X <br>(Panther,Tiger,Leopard,Snow Leopard)</td><td> 
gcc 4.0 <br>
gcc 4.2 <br>
</td></tr>

</table>

\section req_libs Required libraries (Only for included Apps)

Install the following external libraries / frameworks if you want to use the included Applications:<br><br>
<table>
<tr><td>Qt4</td><td><a href="http://www.qtsoftware.com/downloads" target="_blank">http://www.qtsoftware.com/downloads</a></td></tr>
<tr><td>GLEW</td><td><a href="http://glew.sourceforge.net/" target="_blank">http://glew.sourceforge.net/</a></td></tr>
</table><br>

\section build_systems Chosing build system

%OpenMesh can be built using the <b>cmake</b> build system.
<br>
<br>

\section sec_compiling_unix Unix

\subsection linux_using_cmake Compiling %OpenMesh using CMake

In order to compile %OpenMesh, create a directory named e.g. "build" in
OpenMesh's root directory. <b>Change to the newly created directory</b> and type
<br/><br/>
<tt>
cmake&nbsp;..&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;## Generates the appropriate Makefiles<br>
make&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;## Builds the project<br>
</tt><br>
You can choose the build type by using cmake with the flag<br>
<b>-DCMAKE_BUILD_TYPE=(Debug|Release)</b><br>
The default is: Debug
<br>
Other flags are:<br/>
<b>-DBUILD_APPS=OFF</b> to disable build of applications and<br/>
<b>-DCMAKE_INSTALL_PREFIX=&lt;path&gt;</b> to specify the install path.
<br/>
When calling <b>make install</b> cmake will install %OpenMesh into this
directory using the subdirectories lib/include/bin.

CMake builds both shared and static under Linux.

Everything will then be build in the <b>Build</b> subdirectory containing the libraries in <b>lib</b> and the binaries in <b>bin</b>.

There are some additional targets:<br>
<b>doc</b>: Builds the Documentation<br>
<b>doc-install</b>: Builds the Documentation and installs it<br>
<br>
<br>

\section sec_compiling_windows Windows

\subsection windows_using_cmake Compiling %OpenMesh using CMake

If you want to use cmake to build your Visual Studio 2008 solution file,<br>
download and install CMake from <a href="http://www.cmake.org/cmake/resources/software.html">www.cmake.org</a>.<br>
(Note: This is not mandatory since there are already VS2008 solution files included in %OpenMesh).<br><br>
Install the OpenGL Extension Wrangler Library (GLEW) from <a href="http://glew.sourceforge.net" target="_blank">http://glew.sourceforge.net</a>.
<br>
<br>
<ul>
<li> Get Visual Studio 2008 </li>
<li> Extract %OpenMesh source code. </li>
<li> Get all required libraries and install them ( including headers! ).</li>
<li> Get cmake for windows from http://www.cmake.org/cmake/resources/software.html <li>
<li> Start the cmake gui and open the %OpenMesh toplevel directory as source directory </li>
<li> Choose a build directory (e.g. create a directory called "build" in OpenMesh's root folder) </li>
<li> Click on configure .... If any libraries are left unconfigured, you can adjust the path manually. Rerun configure until everything is configured correctly.
     Attention: Some build variables are only visible in advanced view mode. Select Visual Studio 9 2008 as
     generator. </li>
<li> Click generate to create the visual studio project files </li>
<li> You can now find a Visual Studio solution file (OpenMesh.sln) in the <b>build</b> directory you chose in cmake </li>
<li> Now you can build %OpenMesh from within Visual Studio using the newly created project file. </li>
</ul>

Note: Set the CMAKE_BUILD_TYPE variable to "Release" if you want %OpenMesh to be built as release.
In Visual Studio 2008 choose "Release" in the appropriate select box and build the solution afterwards.

<br>
<br>

\section sec_compiling_macosx MacOS X

Download and install required libraries as stated above.
Because some of the examples depend on the GLEW library, it's recommended to install glew via MacPorts portage system <a href="http://www.macports.org/" target="_blank">MacPorts</a>.<br>
If you have not installed it yet, follow the instructions given on their site in order to install it.<br>
Type
<tt>
sudo port -v install glew
</tt>
to install glew headers and libraries. ( MacPorts usually installs header files to \c /opt/local/include and libraries to \c /opt/local/lib. )<br>
<br>

\subsection mac_using_cmake Compiling %OpenMesh using CMake

If you're using cmake as preferred build system create a directory
named e.g. in %OpenMesh's root directory and change to it.
<br/><br/>
<tt>
cmake&nbsp;..&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;## Generates the appropriate Makefiles<br>
make&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;## Builds the project (use 'make debug' to build debug version)<br>
</tt><br>
The mac application bundle will be found under "Build" in the recently created build folder. 
It automatically contains all needed shared objects (libs, fonts, textures, etc.).

CMake builds both shared and static under MacOS X.

**/


//-----------------------------------------------------------------------------
